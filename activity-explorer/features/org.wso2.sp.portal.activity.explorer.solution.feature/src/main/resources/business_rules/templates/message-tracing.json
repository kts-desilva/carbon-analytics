{
   "templateGroup": {
      "uuid": "message-tracing",
      "name": "Message Tracer",
      "description": "Templates for Message Tracring scenario",
      "ruleTemplates": [
         {
            "uuid": "message-tracing-source-template",
            "name": "Message Tracer Source Template",
            "description": "Defines a source for the Span Stream (Assumes that the attributes of the receiving stream contains the exact attributes as the persisting span stream)",
            "type": "template",
            "instanceCount": "many",
            "script": "var sourceOptions = acceptSourceOptions('${userInputForsourceOptions}');\n\n/**\n* Accepts source options when given, otherwise returns a blank\n*/\nfunction acceptSourceOptions(input) {\n\tif (input === '()') {\n\t   return '';\n\t}\n\treturn input + ',';\n}\n\n\n\n\n",
            "templates": [
               {
                  "type": "siddhiApp",
                  "content": "@App:name(\"Activity Explorer\")\n@App:description(\"This Siddhi app defines a source for the Span Stream and persists the stream\")\n\n@source(type='${sourceType}', ${sourceOptions}\n    @map(type='${mapType}')\n)\ndefine stream SpanStream (serviceName string, operationName string, spanId string, traceId string, parentId string, tags string, baggageItems string, startTime long, endTime long, spanReferences string);\n\n@Store(type='rdbms', datasource='Message_Tracing_DB', field.length=\"tags:8000\")\n@PrimaryKey('traceId', 'spanId')\ndefine table SpanTable (serviceName string, operationName string, spanId string, traceId string, parentId string, tags string, baggageItems string, startTime long, endTime long, spanReferences string);\n\nfrom SpanStream\nselect serviceName, operationName, spanId, traceId, parentId, tags, baggageItems, startTime, endTime, (endTime - startTime) as duration, spanReferences\ninsert into SpanTable;"
               }
            ],
            "properties": {
               "sourceType": {
                  "fieldName": "source type",
                  "description": "Receiving source type (\"http\", \"jms\", \"kafka\")",
                  "defaultValue": "wso2event"
               },
               "mapType": {
                  "fieldName": "Map Type",
                  "description": "Event attribute mapping type ",
                  "defaultValue": "wso2event"
               },
               "userInputForsourceOptions": {
                  "fieldName": "Source Options",
                  "description": "Receiving source options (eg: topic.list='kafka_topic', partition.no.list='0', threading.option='single.thread')",
                  "defaultValue": "()"
               }
            }
         },
         {
            "uuid": "message-tracing-app-template",
            "name": "Message Tracer App Template",
            "description": "Converts a specific span stream to persisting span stream (with or without a parent span per activity trace)",
            "type": "template",
            "instanceCount": "many",
            "script": "var noOfEventForTrace = acceptNoOfEventForTrace('${userInputForNoOfEventForTrace}');\n\n/**\n* Accepts source options when given, otherwise returns a blank\n*/\nfunction acceptNoOfEventForTrace(input) {\n\tvar value = Math.floor(--input);\n\tvar numarr = value.toString().split(\".\");\n\treturn numarr[0];\n}",
            "templates": [
               {
                  "type": "siddhiApp",
                  "content": "@App:name(\"ActivityExplorer\")\n@App:description(\"This Siddhi app defines a source for the Span Stream and converts the received span stream to WSO2 span stream format\")\n\n${spanStreamInDefinition}\n\n@Store(type='rdbms', datasource='Message_Tracing_DB', field.length=\"tags:8000\")\n@PrimaryKey('traceId', 'spanId')\ndefine table SpanTable (serviceName string, operationName string, spanId string, traceId string, parentId string, tags string, baggageItems string, startTime long, endTime long, duration long, spanReferences string);\n\n\nfrom SpanStreamIn\nselect ${serviceName} as serviceName, ${operationName} as operationName, ${spanId} as spanId, ${traceId} as traceId, ${parentId} as parentId, ${tags} as tags, ${baggageItems} as baggageItems, ${startTime} as startTime, ${endTime} as endTime, ${spanReferences} as spanReferences\ninsert into TempSpanStream;\n\nfrom TempSpanStream[ not ${parentSpanIsDefined}]\nselect serviceName, operationName, spanId, traceId, parentId, tags, baggageItems, startTime, endTime, spanReferences\ninsert into CreateParentSpanStream;\n\nfrom TempSpanStream[${parentSpanIsDefined}]\nselect serviceName, operationName, spanId, traceId, parentId, tags, baggageItems, startTime, endTime, spanReferences\ninsert into SpanStream;\n\nfrom every( e1=CreateParentSpanStream) -> e2=CreateParentSpanStream[e1.traceId==traceId]<${noOfEventForTrace}>\nwithin ${approximateTimeForCompleteTrace}\nselect ${parentServiceName} as serviceName, ${parentOperationName} as operationName, str:concat(\"parent_\", e1.traceId) as spanId, e1.traceId as traceId, \"-1\" as parentId, ${parentTags} as tags, ${parentBaggageItems} as baggageItems, e1.startTime as startTime, e2[last].endTime as endTime, ${parentSpanReferences} as spanReferences\ninsert into SpanStream;\n\nfrom CreateParentSpanStream\nselect *\ninsert into SpanStream;\n\nfrom SpanStream\nselect serviceName, operationName, spanId, traceId, parentId, tags, baggageItems, startTime, endTime, (endTime - startTime) as duration, spanReferences\ninsert into SpanTable;"
               }
            ],
            "properties": {
               "spanStreamInDefinition": {
                  "fieldName": "Span stream definition",
                  "description": "This contains the source description and the stream definition",
                  "defaultValue": "@source(type='wso2event',  @map(type='wso2event')) define stream SpanStreamIn (meta_tenant_id int, meta_http_method string, meta_character_set_encoding string, meta_remote_address string, meta_transport_in_url string, meta_message_type string, meta_remote_host string, meta_service_prefix string, meta_host string, correlation_activity_id string, message_direction string, service_name string, operation_name string, message_id string, timestamp long, zone string, status string, startzone string, targetzone string, file_path string, file_name string, file_uri string, file_length long, last_modified long, transport_name string, soap_header string);"
               },
               "serviceName": {
                  "fieldName": "Service Name",
                  "description": "Service name which generated the span. This can be a spanStreamIn's attribute name or generated through this template.",
                  "defaultValue": "str:concat(correlation_activity_id, \"_\", timestamp)"
               },
               "operationName": {
                  "fieldName": "Operation Name",
                  "description": "The operation which is done by the service defined in the span. This can be a spanStreamIn's attribute name or generated through this template.",
                  "defaultValue": "\"getResource\""
               },
               "spanId": {
                  "fieldName": "Span ID",
                  "description": "The attribute name in the Span Stream Definition that captures the ID of the span. When the activity flow spans over multiple services, the extent of the flow that relates to one of the services is identified as a single span with a unique ID. (this value can be generated through this template as well) ",
                  "defaultValue": "str:concat(correlation_activity_id, timestamp)"
               },
               "traceId": {
                  "fieldName": "Trace ID",
                  "description": "The attribute name in the Span Stream Definition that captures the ID of the trace. The trace refers to the complete tracing carried out for the activity flow. An activity flow may span over multiple services. (this value can be generated through this template as well) ",
                  "defaultValue": "correlation_activity_id"
               },
               "parentId": {
                  "fieldName": "Parent ID",
                  "description": "Parent span's ID. Parent span may explicitly start other spans. This can be an attribute name or generated through this template.",
                  "defaultValue": "\"0\""
               },
               "tags": {
                  "fieldName": "Tags",
                  "description": "Tags contains the payload values used by the service defined in the span. (This should be a JSON payload. This can be an attribute name or use concatenation using str:concat)",
                  "defaultValue": "str:concat(\"[{'meta_tenant_id':'\", meta_tenant_id, \"'},{'meta_http_method':'\", meta_http_method, \"'},{'meta_character_set_encoding':'\", meta_character_set_encoding, \"'},{'meta_remote_address':'\", meta_remote_address, \"'},{'correlation_activity_id':'\", correlation_activity_id, \"'},{'service_name':'\", service_name, \"'},{'operation_name':'\", operation_name, \"'},{'start_timestamp':'\", timestamp, \"'},{'end_timestamp':'\", (timestamp + 300), \"'}]\")"
               },
               "baggageItems": {
                  "fieldName": "Baggage Items",
                  "description": "Baggage Items contains the payload values commonly used by the whole transaction. (This should be a JSON payload. This can be an attribute name or use concatenation using str:concat)",
                  "defaultValue": "\"[]\""
               },
               "startTime": {
                  "fieldName": "Start Time",
                  "description": "Starting time of the span. This can be an attribute name or generated through this template.",
                  "defaultValue": "timestamp"
               },
               "endTime": {
                  "fieldName": "End Time",
                  "description": "Attribute name in spanStreamIn for Start Time for the span in milliseconds. Use a mechanism to generate value as shown in the default value, if the stream \"start time\" attribute is not available)",
                  "defaultValue": "(timestamp + 300)"
               },
               "spanReferences": {
                  "fieldName": "Span References",
                  "description": "Attribute name in spanStreamIn for Span References",
                  "defaultValue": "\"\""
               },
               "parentSpanIsDefined": {
                  "fieldName": "Parent span is defined",
                  "description": "Value \"true\" implies the parent span received in the spanStreamIn",
                  "defaultValue": "true"
               },
               "parentServiceName": {
                  "fieldName": "Parent Span Service name",
                  "description": "This is the service name which will be given to the parent span generated by siddhi (eg: str:concat(\"parent\", \"_\", e1.startTime, \"-\", e2[last].endTime)",
                  "defaultValue": "\"parent_service\""
               },
               "parentOperationName": {
                  "fieldName": "Parent Operation name",
                  "description": "This is the parent operation name which will be given to the parent span generated by siddhi (eg: str:concat(\"parent\", \"_\", e1.startTime, \"-\", e2[last].endTime)",
                  "defaultValue": "\"parent_operation\""
               },
               "parentTags": {
                  "fieldName": "Parent Tags",
                  "description": "This is the parent operation name which will be given to the parent span generated by siddhi (eg: str:concat(\"parent\", \"_\", e1.startTime, \"-\", e2[last].endTime)",
                  "defaultValue": "\"[]\""
               },
               "parentBaggageItems": {
                  "fieldName": "Parent Baggage Items",
                  "description": "This is the parent operation name which will be given to the parent span generated by siddhi (eg: str:concat(\"parent\", \"_\", e1.startTime, \"-\", e2[last].endTime)",
                  "defaultValue": "\"[]\""
               },
               "parentSpanReferences": {
                  "fieldName": "Parent Span References",
                  "description": "This is the parent span references name which will be given to the parent span generated by siddhi (eg: str:concat(\"parent\", \"_\", e1.startTime, \"-\", e2[last].endTime)",
                  "defaultValue": "\"\""
               },
               "approximateTimeForCompleteTrace": {
                  "fieldName": "Approximate Time For Complete Trace",
                  "description": "This parameter is required to generate parent span using the spans accumulated during the 1 minute period",
                  "defaultValue": "1 min"
               },
               "userInputForNoOfEventForTrace": {
                  "fieldName": "No of Events per Trace",
                  "description": " This is required only if parentSpanIsDefined is false to generate the parent span",
                  "defaultValue": "4"
               }
            }
         }
      ]
   }
}